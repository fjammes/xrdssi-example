#!/usr/bin/env sh
#
# xrootd/cmsd	This shell script takes care of starting and stopping
#		Qserv xrootd/cmsd instances.
# description: xrootd is the filesystem which allow Qserv master to \
# communicate with Qserv workers.\
# It is composed of two services : xrootd and cmsd
# Note

### BEGIN INIT INFO
# Provides: xrootd cmsd
# Short-Description: start and stop xrootd/cmsd
# Description: XRootD software framework is a fully generic suite for fast, \
#              low latency and scalable data access. It's the communication \
#              middleware used between Qserv master and nodes. \
### END INIT INFO
set -e
set -x

DIR=$(cd "$(dirname "$0")"; pwd -P)

# Source functions library.
. ${DIR}/functions

NAME="xrootd"
DAEMON=${NAME}

source_sysconfig ${DIR}

# Check variables which are not controlled by application
check_writable ${NAME} "XROOTD_PID_DIR"
check_writable ${NAME} "XROOTD_LOG_DIR"
check_writable ${NAME} "XROOTD_RUN_DIR"
check_readable ${NAME} "XROOTD_ETC_DIR"
check_readable ${NAME} "XROOTD_DIR"

err_msg="Failure while starting ${NAME}:"

XROOTD_CONFIG="${XROOTD_ETC_DIR}/lsp.cf"

PID_DIR=${XROOTD_PID_DIR}
LOG_DIR=${XROOTD_LOG_DIR}

# method to guess pid file name,
# takes single argument - program name
pid_file_name() {
    local pidfile=${PID_DIR}/$1.pid
    test "${1}${NODE_TYPE}" = "cmsdmaster" && pidfile=${PID_DIR}/$1.mangr.pid
    echo $pidfile
}

start_service() {

        local prog

	prog=${1##*/}

	pidfile=$(pid_file_name $prog)
	lockfile=${XROOTD_LOCK_DIR}/subsys/${prog}
	BINARY=${XROOTD_DIR}/bin/${prog}
	LOGFILE=${LOG_DIR}/${prog}.log
	[ -x ${BINARY} ] || exit 5
	[ -f ${XROOTD_CONFIG} ] || exit 6

	xrootd_cmd="${BINARY} -c ${XROOTD_CONFIG} -l ${LOGFILE} -I v4 &"
    # xrootd modifies log file path, try to guess it here too, this is not critical,
    # it is only used by start() for diagnostic if start fails.
    # TODO: start should not be using envvar from caller scope, if it needs log file name
    # then we should pass it explicitely
	LOGFILE=${LOG_DIR}/${prog}.log
	start -p ${pidfile} -l ${lockfile} ${prog} "${xrootd_cmd}"
}

stop_service() {

        local prog

        prog=${1##*/}

        pidfile=$(pid_file_name $prog)
	lockfile=${XROOTD_LOCK_DIR}/subsys/${prog}

        stop -p $pidfile -l $lockfile $prog
}

start_all() {
        local xrootd_started cmsd_started=0 retval=1
        mkdir -p ${PID_DIR} || {
           log_failure_msg "Failed to create ${PID_DIR}"
           return 1
        }

        start_service "xrootd"
        xrootd_started=$?

        if [ ${NODE_TYPE} != "mono" ]; then
            start_service "cmsd"
            cmsd_started=$?
        fi

        test $xrootd_started -eq 0 -a $cmsd_started -eq 0
}

stop_all() {
        local xrootd_stopped cmsd_stopped=0 retval=1

        stop_service "xrootd"
        xrootd_stopped=$?

        if [ ${NODE_TYPE} != "mono" ]; then
            stop_service "cmsd"
            cmsd_stopped=$?
        fi

        test $xrootd_stopped -eq 0 -a $cmsd_stopped -eq 0
}

status_all () {
        local xrootd_status cmsd_status=0 retval=1

        NAME="xrootd"
       	DAEMON=${XROOTD_DIR}/bin/${NAME}
        pidfile=$(pid_file_name $NAME)
        status_of_proc -p $pidfile "$DAEMON" "$NAME"
       	xrootd_status=$?

        if [ ${NODE_TYPE} != "mono" ]; then
            NAME="cmsd"
            DAEMON=${XROOTD_DIR}/bin/${NAME}
            pidfile=$(pid_file_name $NAME)
            status_of_proc -p $pidfile "$DAEMON" "$NAME"
            cmsd_status=$?
        fi

        test $xrootd_status -eq 0 -a $cmsd_status -eq 0
}



# See how we were called.
case "$1" in
  start)
	start_all
	;;
  stop)
	stop_all
	;;
  status)
	status_all
	;;
  restart)
	stop_all
	start_all
	;;
  try-restart|condrestart)
	if status_all > /dev/null; then
	    stop_all
	    start_all
	fi
	;;
  *)
	echo $"Usage: $0 {start|stop|status|restart|try-restart}"
	exit 2
esac
